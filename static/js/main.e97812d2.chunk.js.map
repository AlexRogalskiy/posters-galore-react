{"version":3,"sources":["constants.js","dataProvider.js","customers.js","backend.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","dataProvider","type","resource","params","fetchJson","fetchUtils","_convertDataProviderR","GET_LIST","_params$pagination","pagination","page","perPage","_params$sort","sort","field","order","query","JSON","stringify","range","filter","url","concat","GET_ONE","id","GET_MANY","ids","GET_MANY_REFERENCE","_params$pagination2","_params$sort2","Object","objectSpread","defineProperty","target","UPDATE","options","method","body","data","CREATE","DELETE","Error","convertDataProviderRequestToHTTP","then","response","headers","json","map","x","total","parseInt","get","split","pop","convertHTTPResponseToDataProvider","CustomerList","props","react_default","a","createElement","List","assign","Datagrid","TextField","source","DateField","BooleanField","restServer","FakeRest","FetchServer","toggleLogging","init","generator","fetchMock","mock","getHandler","initBackend","App","Admin","Resource","name","list","icon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e97812d2.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:8383';\n","import {\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    DELETE,\n    fetchUtils,\n} from 'react-admin';\nimport { stringify } from 'query-string';\nimport { API_URL } from './constants';\n\n/**\n * @param {String} type One of the constants appearing at the top of this file, e.g. 'UPDATE'\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n * @param {Object} params The Data Provider request params, depending on the type\n * @returns {Object} { url, options } The HTTP request parameters\n */\nconst convertDataProviderRequestToHTTP = (type, resource, params) => {\n    switch (type) {\n        case GET_LIST: {\n            const { page, perPage } = params.pagination;\n            const { field, order } = params.sort;\n            const query = {\n                sort: JSON.stringify([field, order]),\n                range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n                filter: JSON.stringify(params.filter),\n            };\n            return { url: `${API_URL}/${resource}?${stringify(query)}` };\n        }\n        case GET_ONE:\n            return { url: `${API_URL}/${resource}/${params.id}` };\n        case GET_MANY: {\n            const query = {\n                filter: JSON.stringify({ id: params.ids }),\n            };\n            return { url: `${API_URL}/${resource}?${stringify(query)}` };\n        }\n        case GET_MANY_REFERENCE: {\n            const { page, perPage } = params.pagination;\n            const { field, order } = params.sort;\n            const query = {\n                sort: JSON.stringify([field, order]),\n                range: JSON.stringify([(page - 1) * perPage, (page * perPage) - 1]),\n                filter: JSON.stringify({ ...params.filter, [params.target]: params.id }),\n            };\n            return { url: `${API_URL}/${resource}?${stringify(query)}` };\n        }\n        case UPDATE:\n            return {\n                url: `${API_URL}/${resource}/${params.id}`,\n                options: { method: 'PUT', body: JSON.stringify(params.data) },\n            };\n        case CREATE:\n            return {\n                url: `${API_URL}/${resource}`,\n                options: { method: 'POST', body: JSON.stringify(params.data) },\n            };\n        case DELETE:\n            return {\n                url: `${API_URL}/${resource}/${params.id}`,\n                options: { method: 'DELETE' },\n            };\n        default:\n            throw new Error(`Unsupported fetch action type ${type}`);\n    }\n};\n\n/**\n * @param {Object} response HTTP response from fetch()\n * @param {String} type One of the constants appearing at the top of this file, e.g. 'UPDATE'\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n * @param {Object} params The Data Provider request params, depending on the type\n * @returns {Object} Data Provider response\n */\nconst convertHTTPResponseToDataProvider = (response, type, resource, params) => {\n    const { headers, json } = response;\n    switch (type) {\n        case GET_LIST:\n            return {\n                data: json.map(x => x),\n                total: parseInt(headers.get('content-range').split('/').pop(), 10),\n            };\n        case CREATE:\n            return { data: { ...params.data, id: json.id } };\n        default:\n            return { data: json };\n    }\n};\n\n/**\n * @param {string} type Request type, e.g GET_LIST\n * @param {string} resource Resource name, e.g. \"posts\"\n * @param {Object} payload Request parameters. Depends on the request type\n * @returns {Promise} the Promise for response\n */\nexport default (type, resource, params) => {\n    const { fetchJson } = fetchUtils;\n    const { url, options } = convertDataProviderRequestToHTTP(type, resource, params);\n    return fetchJson(url, options)\n        .then(response => convertHTTPResponseToDataProvider(response, type, resource, params));\n};\n","import React from 'react';\nimport { List, Datagrid, TextField, BooleanField, DateField } from 'react-admin';\n\nexport const CustomerList = props => (\n    <List {...props} sort={{ field: 'last_seen', order: 'DESC' }}>\n        <Datagrid>\n            <TextField source=\"first_name\" />\n            <TextField source=\"last_name\" />\n            <DateField source=\"first_seen\" />\n            <DateField source=\"last_seen\" />\n            <DateField source=\"latest_purchase\" />\n            <BooleanField source=\"has_newsletter\" />\n        </Datagrid>\n    </List>\n);\n","import FakeRest from 'fakerest';\nimport fetchMock from 'fetch-mock';\nimport generator from 'data-generator-retail';\n\nimport { API_URL } from './constants';\n\nexport const initBackend = () => {\n    const restServer = new FakeRest.FetchServer(API_URL);\n    restServer.toggleLogging();\n    restServer.init(generator());\n    fetchMock.mock(`begin:${API_URL}`, restServer.getHandler());\n}\n","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './dataProvider'\nimport UserIcon from '@material-ui/icons/Group';\n\nimport { initBackend } from './backend';\nimport { CustomerList } from './customers'\n\ninitBackend();\n\nconst App = () =>\n  <Admin dataProvider={dataProvider}>\n    <Resource name=\"customers\" list={CustomerList} icon={UserIcon} />\n  </Admin>\n  ;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}